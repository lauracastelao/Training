Un aspecto importante de Git es cómo mantener limpio el repositorio y su historia. Una historia limpia es más cómoda para trabajar y para comprender qué ha sucedido.

En esta lección cubriremos cómo reescribir la historia de Git usando el comando rebase para reestructurar los commits y asegurarnos de que son comprensibles antes de subir / push los cambios.

Recomendación: Solo deberíamos hacer rebase de commits que no hayamos compartido con otras personas vía push. El proceso de rebasing de commits provoca que los hash_id commit-ids cambien, lo cual puede resultar en pérdida de commits futuros.

Paso 1 - Enmendando (amend) mensajes de commit
Para reescribir el histórico de los repositorios, usamos el comando:

git rebase -interactive
Al poner un rebase en modo interactivo, tenemos más control sobre los cambios que queremos hacer. Después de lanzar el modo interactivo, disponemos de 6 comandos para llevar a cabo en cada commit del repositorio. Usando el editor, podemos definir qué acciones queremos llevar a cabo en cada commit .

En este ejercicio, vamos a cambiar el comentario de un commit. Tras ponerlo en estado rebase , tendremos que cambiar la palabra pick por la palabra reword para el identificador de commit para el que queramos cambiar la descripción.

En esta lección, solo vamos a cambiar la descripción. Ejemplo:




Tarea
Para este ejercicio, vamos a crear un nuevo repositorio.

Crearemos 9 ficheros, y tras la creación de cada uno, haremos un commit y agregaremos un texto inequívoco que nos sirva como descriptor.

Para empezar el rebase lanzamos:

git rebase --interactive --root
Entrando en “Interactive Mode”

Una vez que estemos en la pantalla de la ilustración anterior, cambiaremos la palabra “pick“ del primer commit de la lista por la palabra “reword“.

Grabamos

Cambiando el mensaje

Ahora cambiamos el mensaje por lo que queramos. Grabamos y salimos.

Lanzamos el comando:

git log --oneline
para comprobar que se ha actualizado el mensaje.

Avanzado
El argumento —root permite hacer un rebase de TODOS los commits del repositorio, incluyendo el primer commit.

Cuando lo que queremos es únicamente cambiar el mensaje del último commit realizado, la alternativa más rápida es lanzar el comando:

git commit --amend
y efectuar los cambios.

Paso 2 - Aprobaciones condensadas (Squash Commits)
Hemos realizado una serie de commits en nuestro entorno. En el momento en el que se hicieron, quizás esos cambios tenían sentido como operaciones independientes, pero ahora necesitamos condensarlos en un único commit.

Usando rebase podemos condensar (squash) los commits todos juntos.

Lanzando git rebase —interactive HEAD~4, tendremos 4 commits disponibles. Para condensarlo, necesitamos una base sobre la que todo será condensado. Por ello, en el ejercicio siguiente, dejamos el primer commit como pick y marcamos los demás como squash . Después de guardar, podremos cambiar el mensaje de commit por algo más clarificador.

Tarea
Cuando entramos en modo interactive rebase podemos especificar lo que queremos modificar en los 4 previos commits. Lanzamos:

git rebase --interactive HEAD~4
En el ejercicio anterior usamos reword . Aquí vamos a usar squash. Queremos condensar 4 commits en uno; si etiquetáramos todos los commits como squash, obtendríamos un error: “Cannot ‘squash’ without a previous commit“ ya que se supone que debe existir un commit base sobre el que condensar los demás.

Para condensar los commits tenemos que dejar el primer commit (el más antiguo temporalmente) como nuestra base, y etiquetar el resto con squash.

Mensaje de commit
Al salvar y salir se mostrará una ventana con una combinación de los cuatro mensajes de commit en el rebase.

Después de guardar el mensaje de commit, el histórico se modificará. Podemos comprobar que el hasid no coincide lanzando:

git log --oneline
Reordenar commits
Reordenar commits puede ayudar a construir una foto más clara del orden lógico cómo se ha completado lo que hemos trabajado.

Tarea
Queremos reordenar nuestros últimos dos commits. Usando HEAD~2 podremos hacerlo:

git rebase --interactive HEAD~2
Usando el editor, simplemente reordenaremos las líneas, guardaremos y saldremos y los commits reflejarán el nuevo orden.

Aquí tenemos una ilustración:





$ git log --oneline
3254464 (HEAD -> master) Rebase combinado del seis al nueve
c58f563 commit numero cinco - fichero1.js
25cd399 commit numero tres
b7f8abc commit numero cuatro - fichero1.js
5f03709 commit numero dos
1ca0ef6 Ahora tras el rebase commit numero uno
Paso 3 - Separar los commits (split)
Del mismo modo que cuando se condensan los commits, a veces es útil separar o desmenuzar los commits con el objeto de mantener la atención y posibilitar un cherry-pick o un revert más sencillo.

Separar los commits es un proceso de dos fases. Primero necesitamos definir qué commit queremos dividir o separar, y segundo, necesitamos definir cómo queremos que se muestren los nuevos commits.

Definiendo el commit que separar (split)

Aquí queremos separar el commit anterior. Lanzamos:

git rebase --interactive HEAD~1
Como en rebase’s previos, necesitamos cambiar la tarea al término edit

Ahora estamos en un estado de edición interactiva del histórico. Git grabará todos los cambios y el resultado final será aplicado al repositorio.

Separando commits

Después de definir que queremos editar el commit, nos encontramos en un estado que nos permite cambiar el histórico (estamos en modo interactivo y finalizaremos la “grabación” de acciones con un —continue)

Como queremos separar un commmit existente, primero necesitamos borrarlo lanzando el comando: git reset HEAD~1.

El commit ha sido borrado pero aún existe. Ahora podemos llevar a cabo los commits como deseamos, es decir, como dos acciones separadas.

Ejecutamos los siguientes comandos:

git add file3.txt
git commit -m "File 3"
git add file4.txt
git commit -m "File 4"
Guardando “la grabación” del rebase

Una vez que estamos felices con el estado del repositorio, y conformes, podemos decirle a git que continúe el rebase y que actualice el repositorio lanzando el comando:

git rebase --continue
Podemos visualizar la salida y los dos nuevos commits con el comando:

git log --oneline
La capacidad de reescribir el histórico es útil para mantener el histórico del repositorio limpio y preciso. Esto ayudará en el futuro para indicar las razones para un cambio o para depurar problemas de código.

Recomendación
Solo deberíamos hacer un rebase en commits que no hayamos compartido con otras personas vía push. El rebasing causa que los identificadores de commit cambien, lo que puede desembocar en pérdida de commits futuros.